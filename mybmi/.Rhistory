## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x[[getinverse]]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x[[get]]
m <- solve(data)
x[[setinverse(m)]]
m
}
A = matrix( c(2, 4, 3, 1, 5, 7), nrow=2, ncol=3, byrow=TRUE)
cacheSolve(A)
??$
$
help $
$ ?
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x["getinverse"]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- m <- x["get"]
m <- solve(data)
x["setinverse(m)"]
m
}
A = matrix( c(2, 4, 3, 1, 5, 7), nrow=2, ncol=3, byrow=TRUE)
cacheSolve(A)
cacheSolve(A)
cacheSolve(A)
A = matrix( c(2, 4, 3, 1), nrow=2, ncol=2, byrow=TRUE)
cacheSolve(A)
cacheSolve(A)
solve(A)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x["getinverse"]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x["get"]
m <- solve(data)
x["setinverse(m)"]
m
}
A = matrix( c(2, 4, 3, 1), nrow=2, ncol=2, byrow=TRUE)
cacheSolve(A)
cacheSolve(A)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x["getinverse"]
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x["get"]
m <- solve(data)
x["setinverse",m]
m
}
A = matrix( c(2, 4, 3, 1), nrow=2, ncol=2, byrow=TRUE)
cacheSolve(A)
cacheSolve(A)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
A = matrix( c(2, 4, 3, 1), nrow=2, ncol=2, byrow=TRUE)
cacheSolve(A)
B <- makeCacheMatrix(A)
cacheSolve(B)
cacheSolve(B)
?runif
?gl
debug(ls)
ls
ls
ls()
library(datasets)
data("iris")
?iris
iris
?mapply
?lapply
qnorm(0.95, mean=1100, sd=75)
qnorm(0.95, mean=1100, sd=7.5)
pbinom(q=3, size=5, prob=0.5, lower.tail=F)
pois(10,15)
ppois(10,15)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
#Quiz 1
fit <- lm (y~x)
summary(fit)
sRes <- deviance(fit)
sRes
summary(fit)$sigma
library(UsingR)
data("mtcars")
fit <- lm(mpg ~ I (wt - mean(wt)), data=mtcars)
summary(fit)
fit <- lm(mpg ~ wt, data=mtcars)
summary(fit)
summary(fit)$coefficients
coeff[1,1] + c(1,-1)* qt(0.975, df=fit$df) * coeff[1,2]
coeff <- summary(fit)$coefficients
coeff[1,1] + c(1,-1)* qt(0.975, df=fit$df) * coeff[1,2]
fit <- lm(mpg ~ I (wt - mean(wt)), data=mtcars)
coeff <- summary(fit)$coefficients
coeff[1,1] + c(1,-1)* qt(0.975, df=fit$df) * coeff[1,2]
?mtcars
mean(mtcars$wt)
fit <- lm(mpg ~ wt, data=mtcars)
coeff <- summary(fit)$coefficients
coeff[1,1] + c(1,-1)* qt(0.975, df=fit$df) * coeff[1,2] * 3
newx=data.frame(x=c(3))
predict(fit, newdata = newx, interval="confidence")
fit <- lm(mpg ~ wt, data=mtcars)
coeff <- summary(fit)$coefficients
newx=data.frame(x=c(3))
predict(fit, newdata = newx, interval="confidence")
fit <- lm(mpg ~ wt, data=mtcars)
coeff <- summary(fit)$coefficients
newx=data.frame(wt=c(3))
predict(fit, newdata = newx, interval="confidence")
fit <- lm(mpg ~ I (wt - 1), data=mtcars)
coeff <- summary(fit)$coefficients
newx=data.frame(wt=c(3))
predict(fit, newdata = newx, interval="confidence")
fit <- lm(mpg ~ I (wt - 1), data=mtcars)
newx=data.frame(wt=c(3))
predict(fit, newdata = newx, interval="confidence")
predict(fit, newdata = newx, interval="prediction")
fit <- lm(mpg ~ wt, data=mtcars)
newx=data.frame(wt=c(3))
predict(fit, newdata = newx, interval="prediction")
fit <- lm(mpg ~ I (wt * 2), data=mtcars)
summary(fit)
coeff <- summary(fit)$coefficients
coeff[2,1] + c(1,-1)* qt(0.975, df=fit$df) * coeff[2,2]
fit <- lm(mpg ~ wt, data=mtcars)
coeff <- summary(fit)$coefficients
coeff[2,1] + c(1,-1)* qt(0.975, df=fit$df) * coeff[2,2]
-6.486308*2
range <- coeff[2,1] + c(1,-1)* qt(0.975, df=fit$df) * coeff[2,2]
range[2]
2*range[2]
2*range
fit <- lm (mpg ~ cyl + wt)
summary(fit)
summary(fit)$coefficients
-5.344472*4
fit <- lm (mpg ~ cyl + wt, data=mtcars)
summary(fit)$coefficients
-1.507795*4
summary(fit)$coefficients[2,1]*(8-4)
adjustedFit <- lm (mpg ~ cyl + wt, data=mtcars)
unadjustedFit <- lm (mpg ~ cyl, data=mtcars)
summary(adjustedFit)$coefficients
summary(unadjustedFit)$coefficients
fit <- lm (mpg ~ factor(cyl) + wt, data=mtcars)
summary(fit)$coefficients[2,1]*(8-4)
fit <- lm (mpg ~ factor(cyl) + wt, data=mtcars)
summary(fit)$coefficients[2,1]*(8-4)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
adjustedFit <- lm (mpg ~ factor(cyl) + wt, data=mtcars)
summary(adjustedFit)$coefficients
unadjustedFit <- lm (mpg ~ factor(cyl), data=mtcars)
summary(unadjustedFit)$coefficients
fit <- lm (mpg ~ wt+factor(cyl), data=mtcars)
summary(fit)$coefficients
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit <- lm (mpg ~ wt+factor(cyl), data=mtcars)
summary(fit)$coefficients
summary(fit)$coefficients[3,1] - summary(fit)$coefficients[2,1]
fit <- lm (mpg ~ factor(cyl) + wt, data=mtcars)
summary(fit)$coefficients[3,1] - summary(fit)$coefficients[2,1]
summary(fit)$coefficients
summary(fit)$coefficients[2,1]-summary(fit)$coefficients[1,1]
summary(fit)$coefficients[3,1]-summary(fit)$coefficients[2,1]
2*(summary(fit)$coefficients[3,1]-summary(fit)$coefficients[2,1])
?hatvalues
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
influence.measures(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm (y~x)
influence.measures(fit)
?mtcars
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit1 <- lm (mpg ~ factor(cyl), data=mtcars)
fit2 <- update(fit1, mpg ~ factor(cyl)+wt)
anova(fit1, fit2)
fit1 <- lm (mpg ~ factor(cyl)+wt, data=mtcars)
fit2 <- update(fit1, mpg ~ factor(cyl)+wt+cyl:wt)
anova(fit1, fit2)
summary(cars)
summary(mtcars)
mean(mtcars$mpg, mtcars$am==0)
mean(mtcars[am==0]$mpg)
mean(mtcars[mtcars$am==0]$mpg)
mtcars[mtcars$am==0]
mtcars[mtcars$am = 0]
mtcars[mtcars$am == 0]
mtcars[mtcars$am == 0]$mpg
subset(mtcars, am==0)
mean(subset(mtcars, am==0)$mpg)
mean(subset(mtcars, am==1)$mpg)
ggplot(mtcars)+
geom_point(mapping=aes(x = cyl, y = mpg, size=10, type=2))+
+ geom_point(aes(colour = factor(am)), size = 4)
library(ggplot2)
ggplot(mtcars)+
geom_point(mapping=aes(x = cyl, y = mpg, size=10, type=2))+
+ geom_point(aes(colour = factor(am)), size = 4)
library(ggplot2)
ggplot(mtcars)+
geom_point(mapping=aes(x = cyl, y = mpg, size=10, type=2))+
geom_point(aes(colour = factor(am)), size = 4)
ggplot(mtcars)+
geom_point(mapping=aes(x = cyl, y = mpg, size=10, type=2, colour = factor(am)))
ggplot(mtcars)+
geom_jitter(mapping=aes(x = cyl, y = mpg, size=10, type=2, colour = factor(am)))
ggplot(mtcars)+
geom_point(mapping=aes(x = cyl, y = mpg, size=10, type=2, colour = factor(am)))
ggplot(mtcars)+
geom_bar(mapping=aes(x=factor(cyl), y=mpg), stat="identity", color="yellow")+
facet_grid(.~am)+
labs(title = "MPG across number of cylinders")
ggplot(mtcars)+
geom_bar(mapping=aes(x=factor(cyl), y=mpg), stat="mean", color="yellow")+
facet_grid(.~am)+
labs(title = "MPG across number of cylinders")
ggplot(mtcars)+
geom_bar(mapping=aes(x=factor(cyl), y=mpg),  color="yellow")+
facet_grid(.~am)+
labs(title = "MPG across number of cylinders")
ggplot(mtcars)+
geom_point(mapping=aes(x=factor(cyl), y=mpg))+
facet_grid(.~am)+
labs(title = "MPG across number of cylinders")
ggplot(mtcars)+
geom_point(mapping=aes(x=factor(cyl), y=mpg))+
facet_grid(.~am, labeller = label_both)+
labs(title = "MPG across number of cylinders")
ggplot(mtcars)+
geom_point(mapping=aes(x=factor(hp), y=mpg))+
facet_grid(.~am, labeller = label_both)+
labs(title = "mpg vs hp")
fit <- lm (mpg ~ factor(am), mtcars)
fit$coefficients
summary(fit)
fit1 <- lm (mpg ~ factor(cyl), mtcars)
fit2 <- lm (mpg ~ factor(cyl)+factor(am), mtcars)
anova(fit1, fit2)
fit1 <- lm (mpg ~ hp, mtcars)
fit2 <- lm (mpg ~ hp+factor(am), mtcars)
anova(fit1, fit2)
summary(lm(mpg ~ . , data = mtcars))
summary(lm(mpg ~ am , data = mtcars))
require(GGally);
require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g = ggpairs(mtcars, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
g = ggplot(data = mtcars, aes(y = mpg, x = am, fill  = am))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of transmission") + ylab("Miles per gallon")
g
g = ggplot(data = mtcars, aes(y = mpg, x = am, fill  = am))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of transmission") + ylab("Miles per gallon")
g
g = ggplot(data = mtcars, aes(y = mpg, x = am, fill  = am))
#g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of transmission") + ylab("Miles per gallon")
g
g = ggplot(data = mtcars, aes(y = mpg, x = am))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of transmission") + ylab("Miles per gallon")
g
g = ggplot(data = mtcars, aes(y = mpg, x = am, fill=am))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of transmission") + ylab("Miles per gallon")
g
g = ggplot(data = mtcars, aes(y = mpg, x = factor(am), fill=factor(am)))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of transmission") + ylab("Miles per gallon")
g
ggplot(data = mtcars, aes(y = mpg, x = factor(am), fill=factor(am)))+
geom_violin(colour = "black", size = 2)+
xlab("Type of transmission") + ylab("Miles per gallon")+
scale_colour_manual("Types of transmission", values=c("0" = "Automatic", "1" = "Manual"))+
ggtitle("Violin Plot")
summary(lm(mpg ~ am, data = mtcars))$coef
#Hard coding the variables
summary(lm(count ~  I(1 * (am == 0)) + I(1 * (am == '1')), data = InsectSprays))$coef
summary(lm(count ~  I(1 * (am == 0)) + I(1 * (am == '1')), data = mtcars))$coef
summary(lm(mpg ~  I(1 * (am == 0)) + I(1 * (am == '1')), data = mtcars))$coef
summary(lm(mpg ~ am, data = mtcars))$coef
summary(lm(mpg ~  I(1 * (am == 0)) , data = mtcars))$coef
summary(lm(mpg ~  I(1 * (am == 1)) , data = mtcars))$coef
autoTransmission <- mean(subset(mtcars, am==0)$mpg)
manualTransmission <- mean(subset(mtcars, am==1)$mpg)
autoTransmission
manualTransmission
summary(lm(mpg ~ am+., data = mtcars))$coef
summary(lm(mpg ~ I(1 * (am==0)+ I(1 * (am==1) +., data = mtcars))$coef
summary(lm(mpg ~ I(1 * (am==0))+ I(1 * (am==1)) +., data = mtcars))$coef
summary(lm(mpg ~ I(1*(am==0)) + I(1*(am==1)) + ., data = mtcars))$coef
summary(lm(mpg ~ I(1*(am==1)) + I(1*(am==0)) + ., data = mtcars))$coef
summary(lm(mpg ~ am + ., data = mtcars))$coef
I(1*(am==1)) + I(1*(am==0))
summary(lm(mpg ~ I(1*(am==1)) + I(1*(am==0)) + ., data = mtcars))$coef
summary(lm(mpg ~ I(1*(am==0)) + I(1*(am==1)) + ., data = mtcars))$coef
summary(lm(mpg ~ am + ., data = mtcars))$coef
summary(lm(mpg ~  ., data = mtcars))$coef
summary(lm(mpg ~ am + ., data = mtcars))$coef
plot(lm(mpg ~ am, mtcars))
?mtcars
require(mtcars)
load(mtcars)
str(mtcars)
mean(mtcars$mpg~am)
mean(mtcars$mpg~ factor(am)
mean(mtcars$mpg~ factor(am))
aggregate(mtcars$mpg~ factor(am), FUN=mean)
aggregate(mtcars$mpg~ am, FUN=mean)
aggregate(mtcars, mpg ~am, FUN=mean)
aggregate(mpg ~am, mtcars, FUN=mean)
ggpairs(mtcars, lower = list(continuous = "smooth"),params = c(method = "loess"))
fit1 <- lm(mpg ~ am, mtcars)
summary(fit1)$coefficients
coeff1
17.147368 + 7.244939
fit(fit1)
plot(fit1)
fit2 <- lm(mpg ~ am+wt+cyl+disp+hp+drat+vs, mtcars)
coeff2 <- summary(fit2)$coefficients
coeff2
par(2,2)
plot(fit1)
coeff2
ggpairs(mtcars, lower = list(continuous = "smooth"),params = c(method = "loess"))
opts_chunk$set(fig.width=7, fig.height=7, dpi=144)
?opts_chunk
library(knitr)
opts_chunk$set(fig.width=7, fig.height=7, dpi=144)
opts_chunk$set(fig.width=20, fig.height=10, dpi=144)
opts_chunk$set(fig.width=20, fig.height=10, dpi=72)
install.packages("shiny")
library(shiny)
?runApp
runApp("D://Personal//Data Science//git//Developing Data Products//predictionApp")
runApp("D://Personal//Data Science//git//Developing Data Products//predictionApp")
devtools::install_github('rstudio/shinyapps')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='lakshmikp', token='817AE16FBE120330FF363546F583019C', secret='nPbvJll7RSasGdIPUsJEl5N8VmEBJ6jVHO2WxGVe')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
runApp("D://Personal//Data Science//git//Developing Data Products//bmi")
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp()
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
install.packages("shinythemes")
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
?pageWithSidebar
?shinyUI
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
library(shinyapps)
shinyapps::deployApp('D:/Personal/Data Science/git/Developing Data Products/bmi')
shinyapps::deployApp(appName='D:/Personal/Data Science/git/Developing Data Products/bmi')
shinyapps::deployApp(appDir='D:/Personal/Data Science/git/Developing Data Products/bmi')
shinyapps::deployApp(appName='bmi', appDir='D:/Personal/Data Science/git/Developing Data Products/bmi')
shinyapps::deployApp(appName='bmi')
getwd
getwd()
setwd('D:/Personal/Data Science/git/Developing Data Products')
deployApp(appName="bmi")
shinyapps::deployApp('bmi')
shinyapps::deployApp(bmi)
shinyapps::deployApp(appDir=bmi)
shinyapps::deployApp(appDir='bmi'')
shinyapps::deployApp(appDir='bmi')
shinyapps::deployApp(appDir='bmi')
shinyapps::deployApp('D:/Personal/Data Science/git/Developing Data Products/mybmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/mybmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/mybmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/mybmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/mybmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/mybmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/mybmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/mybmi')
shiny::runApp('D:/Personal/Data Science/git/Developing Data Products/mybmi')
